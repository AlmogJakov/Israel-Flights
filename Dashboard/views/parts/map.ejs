<!DOCTYPE html>
<!--
    https://www.bingmapsportal.com/Application#    
    https://www.bing.com/api/maps/sdk/mapcontrol/isdk/loadmapasync#JS
    https://docs.microsoft.com/en-us/bingmaps/v8-web-control/map-control-concepts/pushpins/custom-image-pushpin-example    
    https://www.bigdatacloud.com/geocoding-apis
-->
<html>

<head>
    <title></title>
    <meta charset="utf-8" />
    <!-- Reference to the Bing Maps SDK -->
    <!-- Should call 'bing' with https (not http) to work with Heroku -->
    <script type='text/javascript'
        src='https://www.bing.com/api/maps/mapcontrol?callback=GetMap&key=Av1tVjvviT_3a3JIBRJZNPhFNKHiCTqGL9C5rD7uAAVU2KFgx16V3NjFP58VCBvk'
        async defer>
    </script>
    <!--
    <script src="https://cdn.socket.io/socket.io-3.0.1.min.js"></script>
    -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/socket.io/2.0.4/socket.io.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    
    <script type="text/javascript">
    //let socket;
        //var map = null;
        var map, infobox, tooltip;
        var tooltipTemplate = '<div style="border-radius: 0.45rem;background-color:white;height:20px;width:150px;padding:5px;text-align:center"><b>{title}</b></div>';
        function setMap() {
            socket = io.connect();
            socket.on('flights', function (msg) {
                add(msg);
            });
            // alert("connected");
            // map styles: https://docs.microsoft.com/en-us/bingmaps/articles/custom-map-styles-in-bing-maps
            var myStyle = {
                "version": "1.0",
                "settings": {
                    "landColor": "#0B334D"
                },
                "elements": {
                    "mapElement": {
                        "labelColor": "#FFFFFF",
                        "labelOutlineColor": "#000000"
                    },
                    "political": {
                        "borderStrokeColor": "#144B53",
                        "borderOutlineColor": "#00000000"
                    },
                    "point": {
                        "iconColor": "#0C4152",
                        "fillColor": "#000000",
                        "strokeColor": "#0C4152"
                    },
                    "transportation": {
                        "strokeColor": "#000000",
                        "fillColor": "#000000"
                    },
                    "highway": {
                        "strokeColor": "#158399",
                        "fillColor": "#000000"
                    },
                    "controlledAccessHighway": {
                        "strokeColor": "#158399",
                        "fillColor": "#000000"
                    },
                    "arterialRoad": {
                        "strokeColor": "#157399",
                        "fillColor": "#000000"
                    },
                    "majorRoad": {
                        "strokeColor": "#157399",
                        "fillColor": "#000000"
                    },
                    "railway": {
                        "strokeColor": "#146474",
                        "fillColor": "#000000"
                    },
                    "structure": {
                        "fillColor": "#115166"
                    },
                    "water": {
                        "fillColor": "#021019"
                    },
                    "area": {
                        "fillColor": "#115166"
                    }
                }
            };
            // Initialize the map - USE YOUR OWN KEY !
            map = new Microsoft.Maps.Map(document.getElementById("myMap"), { credentials: "Av1tVjvviT_3a3JIBRJZNPhFNKHiCTqGL9C5rD7uAAVU2KFgx16V3NjFP58VCBvk", customMapStyle: myStyle});
			map.setView({
                //mapTypeId: Microsoft.Maps.MapTypeId.aerial,
                center: new Microsoft.Maps.Location(33.027222, 32.0225),
                zoom: 6
            });

            //Create an infobox to use as a tooltip when hovering.
            tooltip = new Microsoft.Maps.Infobox(map.getCenter(), {
                visible: false,
                showPointer: false,
                showCloseButton: false,
                offset: new Microsoft.Maps.Point(-75, 20)
            });
            tooltip.setMap(map);
            //Create an infobox for displaying detailed information.
            infobox = new Microsoft.Maps.Infobox(map.getCenter(), {
                visible: false
            });
            infobox.setMap(map);
        }
    </script>

    <script type='text/javascript'>
		// rotation
		// source: https://social.msdn.microsoft.com/Forums/sqlserver/en-US/02de6b85-ee3d-4780-a4fd-3b944f0fc1b4/rotate-custom-image-pushpin?forum=bingmapsajax
		// source: https://www.anycodings.com/1questions/5317334/how-to-rotate-pushpin-image-in-bing-map#:~:text=https%3A//bingmapsv8samples.azurewebsites.net/%23Pushpin_RotatedImage
		// source: https://github.com/microsoft/BingMapsV8CodeSamples/blob/main/Samples/Pushpins/Rotated%20Image/Pushpin%20Rotated%20Image.html
		// source: https://docs.microsoft.com/en-us/bingmaps/v8-web-control/map-control-concepts/pushpins/custom-canvas-pushpin-example
		// FIX: https://stackoverflow.com/questions/5820209/image-onload-event-not-working-in-chrome
		function createRotatedImagePushpin(location, url, rotationAngle, filghtID, callback) {
			var img = new Image();
			img.onload = function () {
				var c = document.createElement('canvas');

				var rotationAngleRads = rotationAngle * Math.PI / 180;

			   //Calculate rotated image size.
				// c.width = Math.abs(Math.ceil(img.width * Math.cos(rotationAngleRads) + img.height * Math.sin(rotationAngleRads)));
				// c.height = Math.abs(Math.ceil(img.width * Math.sin(rotationAngleRads) + img.height * Math.cos(rotationAngleRads)));
                c.width = 45;
				c.height = 45;
				var context = c.getContext('2d');

				//Move to the center of the canvas.
				context.translate(c.width / 2, c.height / 2);

				//Rotate the canvas to the specified angle in degrees.
				context.rotate(rotationAngleRads);

				//Draw the image, since the context is rotated, the image will be rotated also.
				context.drawImage(img, -img.width / 2, -img.height / 2);

				var pin = new Microsoft.Maps.Pushpin(location, {
					//Generate a base64 image URL from the canvas.
					icon: c.toDataURL(),
                    //title: filghtID,
					anchor: new Microsoft.Maps.Point(c.width / 2, c.height / 2) //Anchor to center of image.
				});

                pin.metadata = {
                    title: 'ID: ' + filghtID,
                    description: 'Discription for pin ' + filghtID
                };

                //Add a mouse events to the pushpin.
                //Microsoft.Maps.Events.addHandler(pin, 'click', pushpinClicked);
                Microsoft.Maps.Events.addHandler(pin, 'mouseover', pushpinHovered);
                Microsoft.Maps.Events.addHandler(pin, 'mouseout', closeTooltip);
                
				if (callback) {
					callback(pin);
				}
			};

			//Allow cross domain image editting.
			img.crossOrigin = 'anonymous';
			img.src = url;
		}
		// end rotation
		
        function add(flightsData) {
            map.entities.clear();
            var json = JSON.parse(flightsData)
            var keys = Object.keys(json);
            for (var i = 0; i < keys.length; i++) {
                var filghtID = keys[i];
                var coordinate_x = JSON.stringify(json[filghtID][0]['coordinate_x']);
                var coordinate_y = JSON.stringify(json[filghtID][0]['coordinate_y']);
                var degree = JSON.stringify(json[filghtID][0]['degree']);
                var loc = new Microsoft.Maps.Location(coordinate_x, coordinate_y);
			    createRotatedImagePushpin(loc, 'airplane.png', degree, filghtID, function (pin) {
				    map.entities.push(pin);
			    });
            }
        }

        function move() {
            for (var i = map.entities.getLength() - 1; i >= 0; i--) {
                var pushpin = map.entities.get(i);
                if (pushpin instanceof Microsoft.Maps.Pushpin) {
                    map.entities.removeAt(i);
                }
            }
        }

        function pushpinHovered(e) {
        //Hide the infobox
        infobox.setOptions({ visible: false });
        //Make sure the infobox has metadata to display.
        if (e.target.metadata) {
            //Set the infobox options with the metadata of the pushpin.
            tooltip.setOptions({
                location: e.target.getLocation(),
                htmlContent: tooltipTemplate.replace('{title}', e.target.metadata.title),
                visible: true
            });
        }
    }
    
    function closeTooltip() {
        //Close the tooltip.
        tooltip.setOptions({
            visible: false
        });
    }

    function pushpinClicked(e) {
        //Hide the tooltip
        closeTooltip();
        //Make sure the infobox has metadata to display.
        if (e.target.metadata) {
            //Set the infobox options with the metadata of the pushpin.
            infobox.setOptions({
                location: e.target.getLocation(),
                title: e.target.metadata.title,
                description: e.target.metadata.description,
                visible: true
            });
        }
    }
		
		
    </script>

    <script>
        //let socket;

        //function initSocket() {
        //socket is global
        //socket = io.connect();
        //alert("connected");
        //socket = io.connect();
        //socket.on('flights', function (msg) {
        //    console.log("ffff");
        //    add();
        //});
        //}<body onload="initSocket()"></body>
    </script>
    
</head>

<body onload="setMap()">
    <div class="map" id="myMap" style="position:relative;width:1000px;height:600px;margin-left: auto;margin-right: auto;"></div>
    <!-- <input type="button" onclick="add()" value="הוסף אייקונים" />
    <input type="button" onclick="move()" value="הסר אייקונים" /> -->
</body>
</body>

</html>